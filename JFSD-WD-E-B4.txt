What is Java Full Stack 
	Front End -> user sees
	Back End -> which runs 24 * 7 -> processing of data, connects to database(SQL, No SQL)
	API -> bridge 


Why Java -> Platform independent, 
			develop web, desktop, mobile
			OOPS -> Object Oriented Programming Language

JVM, JDK, JRE -> Name.java

	Java Virtual Machine -> load, verify, execute code and provides run time env

	Java Runtime Environment  -> implementation of JVM -> libraries + files --> Sun Microsystems

	Java Development Kit -> javac, java etc + JRE + some supporting jars

Java Enhancement Proposal -> JEP
			java 6 -> 2006 , java 7 : 2011., java 8 : 2014, java 9 : 2017
			LTS : Long Term Support Versions -> 8, 11, 17, 21 (current lts version)
			every six months in march and september -> minor versions, non-lts versions

			Back ward compatability..

Install JDK : Open JDK , Oracle JDK, Amazon Coretto JDK..

		Edit environment variables(installed JDK) and edit path (bin)
		cmd -> check java -version		

Install IDE : Integrated Development environment 
		Eclipse, NetBeans, STS, IntelliJ (community - free source, ultimate - paid version)

Configure a folder in IntelliJ
	-> New Project -> created a project with IntelliJ System, add/select JDK
	-> packages -> group of classes
	-> .java extension
	-> Class : Blue print -> objects, methods/functions, refer to another class, variables
		Objects : attributes -> weight, color -> characterstics
				  methods -> actions your perform : drive, applyBrake, soundHorn
				  constructors -> creating and initializing objects

Naming Conventions :
	camelcase : 
		Class Names : UniversityServiceImplementation .. connEctioexception
		method/function, Object Names : applyBrake

	Compilation Error : When you code, you will see errors	
		through cmd : javac HelloWorld.java

	Run Time Errors : When you execute code, you will see errors
		run through cmd : java HelloWorld.java


	Main : public static void main(String[] args){
			public -> access modifier
			static -> key word
			void -> return type
			main -> name of the Method
			String[] args -> input parameters/method signature.. Array of String arguments
	}

	From static methods you can't refer non-static variables or methods directly
		Create an object for class, from object you can refer non-static attributes in static methods


	Comments :
		    /* comment
   			 * something */

			//    comment	

Object Creation :

	NameOfClass objName = new NameOfClass();
	create any number of objects for a class
	name of object in a method should be unique

A method inside a method -> compilation error


Task :

Create a class `Student` with a non-static variable `studentId` and a static variable `universityName`. 
Write methods to display `studentId` and `universityName`, 
and a static method to update `universityName`.
In the `main` method of `Student`, create two `Student` objects, assign different `studentId` values, display their details, update `universityName` using the static method, and display the details again. 
Observe how the change in `universityName` affects both objects.

16/10/24 

	1. primitive Data Types : Stores simple values directly in memory 
		byte : 8-bit (-128 to 127)
		short : 16-bit
		int : 32-bit
		long : 64-bit
		float : 32-bit , floating point number (single precision)
		double : 64-bit, floating point number (double precision)
		char : 16-bit unicode charcter, single alphabet
		boolean : true or false

	2. Non-Primitive Data Types or Reference Data types : store references to objects(memory address)

		String : sequence of characters (number, alphabet, spcl charcters)
		Arrays : group -> collection of elements of same data type
		Class : blue-print of objects
		Interfaces : set of methods which class implement
		Enumerator .. Enum : represent fixed set of constants

	3. Wrapper classes: wraps around primitive data types : Objects
		a. When you work with Collection of Objects
		b. Generics
		c. autoboxing -> primitive to wrapper and vice-versa -> unboxing
		d. Data Conversion : Type Casting
		c. to store null values
		e. Serialization : conversion of objects to byte stream

instanceof -> objectName instanceof DataType/ClassName -> true	

toString -> can't NPE
String.valueof() -> handle NPE

		Integer myInt = null;
        Integer.valueOf(myInt);
        myInt.intValue();	

//byte < short < char < int < long < float < double

narrow -> Manual Cast
and wide casting -> automatic casting

Variables :
	Local or Instance : Scope is limited to method
	Global : scope is limited to Class		

Literals : Values assigned to variables

Identifiers : names you give to variables, methods, classes, packages

KeyWords : predefined functionality and they can't be identifiers

17/10/2024

Operators : perform some calculations/operation on variables or values

	Arithmetic Operators : Basic Math : + , -, *, /, %(modulus), ++, --
		++a -> PreIncrement
		a++ -> PostIncrement

1)++Post-Increment (a++):++we use a++ in our statement if we want to use the current value, and then we want to increment the value of ++a by 1.
2)Pre-Increment(++a): We use ++a in our statement if we want to increment the value of ++a by 1 and then use it in our statement.

	Assignment Operators -> =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<=
		int a = 6 
		a += 5; --> a = a(6) + 5 => 11
	Comparison Operators/Relational Operators -> ==, !=, >, <, >=, <=
	Logical Operators : &&, ||, !
		&& -> If one statement is false, result will be false
		|| -> If one statement is true, result will be true
	Bitwise Operators &, |, ^, ~, <<(Signed left shift), >>(Signed right shift), >>>(Unsigned right)
	Unary Operators :  ++, -- (Pre and Post), 
			Unary plus , 
			unary minus, unary !
	InstanceOf Operator : instanceof
	
	Ternary Operator ?
		condition ? expression1 : expression2
			condition == true then expression1 will be executed
			condition == false then expression2 will be executed

Conditional Statements : if, if-else, if-else-if, nested if
	Scanner -> take input from user
	Debug your code -> put breakpoints, start in debug mode

Switch Statement : switch, case, break
	When you have to check multiple conditions, instead of "if", we can use Switch

Loops : for, for-each/enhanced for -> Collections, nested for, infinite-for loop
		If you want to execute a piece of code many times until the condition is satisfied
			for loop :
	 	for(initialize a variable; condition; increment/decrement.. post or pre operator)
		nested for loop : loop inside loop 

		while : repetetive block of code execution as long as condition is true, 
		do while : atleast once, execute code irrespective condition
		infinite loop using while

jump statements -> break, continue, return 

Push your code to github

Install git : https://git-scm.com/downloads


Repository : https://github.com/kavyamaremalla/JFSD-WD-E-B4

git clone https://github.com/kavyamaremalla/JFSD-WD-E-B4.git --> for the first time
git pull -> daily, you will get updates.

Push your code from your system to github repo :
	
	git add .
	git status -> Optional, to check what files you are going to commit
	git commit -m "Your_Message"
	git push

Submit a task :
	Don't add zip files
	Add question and screenshot of your output
	Follow proper naming conventions
	Add comments, describing what the method does

21/10/24 : Arrays : 
		Data structure -> stores fixed-size of same data type elements
						  organize data -> to access, modify, manage
						  index -> starts with 0 and this is position

		Types of Arrays ->

			One-Dimensional Array -> A linear list of elements
			Two-Dimensional Array -> A table like structure.. rows and columns just like matrix	
			Multi-Dimensional Array -> more than 2 dimensions

			length -> size of array		  

Insert -> Adding an element into array
			arrayName[indexPosition] = valueOfElement;

Read an Array -> for loop
				 Arrays.toString(nameOfArray) -> prints you whole array

Update an Array ->
	
	nameOfArray[indexPositionToUpdate] = upadtedValue

	    int[] numbers = {1,2,3,4,5};

        numbers = Arrays.copyOf(numbers, numbers.length + 1);
        numbers[5] = 61;

Search and Sort in Array    

AccessModifiers : class, method, constructor, attributes

    public : for all classes irrespective packages -> through out your application
    private : code is accessible within the declared class
    default : code is accessible within same package
    protected : code is accessible in the same package and subclasses (child classes in other package)

Non-Access Modifiers :

	final : classes/attributes/methods -> can't extend/can't modify/can't override
	abstract : class/method
	static : method,attribute level
	transient attribute/method level
	synchronized : one thread at a time
	volatile : attribute -> cache thread locally

22/10/24 :

Introduction to Strings :

String : A sequence of characters and it's considered as Object in Java. 
		 String is an immutable object -> once created it can't be changed	

String Methods :
			
			length
			charAt(index position) -> character
			indexOf("character") -> position
			concat -> combining string
			toUpperCase / toLowerCase
			equals/equalsIgnoreCase, == (memory/reference)
			repeat
			trim -> removes whitespaces from ends
			replace -> replace a character
			subString -> only begin index or begin inclusive, end exclusive index

String Builder vs Buffer : like string but mutable
		Buffer -> thread-safety, synchronous
		Builder -> not-synchronized, faster execution
		reverse -> in built methods

String Manipulation -> substring, replace, concate 

String Constant Pool (SCP) ->	special memory inside heap memory where string literals 	are stored.
	(String name = "John" -> literal gets stored in String pool.. 
	String surname = new String("Doe").. heap memory -> String Object)

	Literals : Java checks if string exists 
	-> If exists, it points/refers to existing object
	-> Else, it creates a new object

Regular Expression : RegEx -- https://regex101.com/
				Patterns used to match character combinations in Strings
				[aA0-zZ9]
				\d -> decimal
				\D -> non-decimal
				\w -> decimal + non-decimal
				\W -> special characters or alpha-numeric
				. -> \w + \W
				.*
				.+

Math Operations -> java.util.Math
				sqrt
				abs
				min
				max
				round
				floor
				ceil
				log
				random

Object Creation :

		new key word
		clone -> copies of objects
		Constructor<ClassName>
		Class<?>
		Serialization and deserialization

Constructors : create an object 
			   Special method used to initialize objects, set initial values for object attributes
			   Constructor will be called when an object of class is created		

Types of Constructors :

	1. Default Constructor -> Java provides through Object.class
	2. Parameterized Constructor -> any number of arguments
	3. No Argument Constructor -> set initial values, and no parameters

OOPS  : Object Oriented Programming

		based on the concept of "Object" -> both data and methods

	Principles :
		
		Encapsulation : Wrapping data(variables) and methods into a single unit.
		Inheritance : A class can inherit properties and behavior of another class.
		Polymorphism : Single action can behave differently based on the object on which it works./ which exists in multiple forms
		Abstraction : hiding internal logic/implementation and show the essential features.
		Assosciation
		Aggregation
		Composition

Inheritance : is-a relationship 
			It's possible to inherit attributes and methods from one class to another class

			  subclass -> child -> this is the class which inheits prop/behaviour from another class
			  superclass -> parent -> this is the class which is being inherited from	

			  extends keyWord -> child extends parent
			 
			  multiple inheritance -> not supported
			  				extending two classes

			  single -> only one class extending one parent				

			  Why multiple inheritance is not supported 
			  				- complexity :  should be readable and simple
			  				- Diamond Problem 
			  					same method names or same variables in two parent classes then child will get confused/ambiguity which one to pick				
			  multi level inheritance -> supported
			  		Car extends Vehicle and Vehicle extends HelloWorld

			  hierarchical -> multiple children for a parent	-> supported				

			  hybrid -> hierarchical + single (HelloWorld)	


This & Super KeyWords : 


Immutable, final

Polymorphism
